version: "3.7"

services:
  agendamento-cw-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    
    networks:
      - odmaxnet

    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:66f26cf0a1b545cfb04266ee8c678016@postgres:5432/postgres
      - N8N_WEBHOOK_URL=https://webhookn8n.odtravel.com.br/webhook/71686ca7-d62c-43ed-8d6b-9930609ef6a9
      - GEMINI_API_KEY=AIzaSyD_lF9jCzGKoT2fB5apsiNbGBq7fJj8T5I
      - CORS_ORIGIN=*
      - TZ=America/Sao_Paulo

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.agendamento-cw-api.rule=Host(`apiag.odmax.com`)"
        - "traefik.http.routers.agendamento-cw-api.entrypoints=websecure"
        - "traefik.http.routers.agendamento-cw-api.tls.certresolver=cloudflare"
        - "traefik.http.services.agendamento-cw-api.loadbalancer.server.port=3000"
        - "traefik.docker.network=odmaxnet"

    depends_on:
      - postgres

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  odmaxnet:
    external: true
    name: odmaxnet